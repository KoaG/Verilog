// -------------------------------------------------------------
//
// Module: filter
// Generated by MATLAB(R) 9.4 and Filter Design HDL Coder 3.1.3.
// Generated on: 2018-12-01 12:13:58
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// ResetType: Synchronous
// FIRAdderStyle: tree
// TargetDirectory: U:\FIR_Filters\from_matlab
// AddPipelineRegisters: on
// TargetLanguage: Verilog
// TestBenchStimulus: impulse step ramp chirp noise 

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// Folding Factor        : 1
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR
// Filter Length     : 11
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// Arithmetic        : fixed
// Numerator         : s16,16 -> [-5.000000e-01 5.000000e-01)
// Input             : s16,15 -> [-1 1)
// Filter Internals  : Full Precision
//   Output          : s33,31 -> [-2 2)  (auto determined)
//   Product         : s31,31 -> [-5.000000e-01 5.000000e-01)  (auto determined)
//   Accumulator     : s33,31 -> [-2 2)  (auto determined)
//   Round Mode      : No rounding
//   Overflow Mode   : No overflow
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module filter
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [15:0] filter_in; //sfix16_En15
  output  signed [32:0] filter_out; //sfix33_En31

////////////////////////////////////////////////////////////////
//Module Architecture: filter
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [15:0] coeff1 = 16'b0000010001001100; //sfix16_En16
  parameter signed [15:0] coeff2 = 16'b0000110100101011; //sfix16_En16
  parameter signed [15:0] coeff3 = 16'b1111000111101101; //sfix16_En16
  parameter signed [15:0] coeff4 = 16'b1100001000110100; //sfix16_En16
  parameter signed [15:0] coeff5 = 16'b0000101101000011; //sfix16_En16
  parameter signed [15:0] coeff6 = 16'b0101111011011110; //sfix16_En16
  parameter signed [15:0] coeff7 = 16'b0000101101000011; //sfix16_En16
  parameter signed [15:0] coeff8 = 16'b1100001000110100; //sfix16_En16
  parameter signed [15:0] coeff9 = 16'b1111000111101101; //sfix16_En16
  parameter signed [15:0] coeff10 = 16'b0000110100101011; //sfix16_En16
  parameter signed [15:0] coeff11 = 16'b0000010001001100; //sfix16_En16

  // Signals
  reg  signed [15:0] delay_pipeline [0:10] ; // sfix16_En15
  wire signed [30:0] product11; // sfix31_En31
  wire signed [31:0] mul_temp; // sfix32_En31
  wire signed [30:0] product10; // sfix31_En31
  wire signed [31:0] mul_temp_1; // sfix32_En31
  wire signed [30:0] product9; // sfix31_En31
  wire signed [31:0] mul_temp_2; // sfix32_En31
  wire signed [30:0] product8; // sfix31_En31
  wire signed [31:0] mul_temp_3; // sfix32_En31
  wire signed [30:0] product7; // sfix31_En31
  wire signed [31:0] mul_temp_4; // sfix32_En31
  wire signed [30:0] product6; // sfix31_En31
  wire signed [31:0] mul_temp_5; // sfix32_En31
  wire signed [30:0] product5; // sfix31_En31
  wire signed [31:0] mul_temp_6; // sfix32_En31
  wire signed [30:0] product4; // sfix31_En31
  wire signed [31:0] mul_temp_7; // sfix32_En31
  wire signed [30:0] product3; // sfix31_En31
  wire signed [31:0] mul_temp_8; // sfix32_En31
  wire signed [30:0] product2; // sfix31_En31
  wire signed [31:0] mul_temp_9; // sfix32_En31
  wire signed [30:0] product1; // sfix31_En31
  wire signed [31:0] mul_temp_10; // sfix32_En31
  wire signed [32:0] sum_final; // sfix33_En31
  wire signed [32:0] sum1_1; // sfix33_En31
  wire signed [30:0] add_signext; // sfix31_En31
  wire signed [30:0] add_signext_1; // sfix31_En31
  wire signed [31:0] add_temp; // sfix32_En31
  reg  signed [32:0] sumpipe1_1; // sfix33_En31
  wire signed [32:0] sum1_2; // sfix33_En31
  wire signed [30:0] add_signext_2; // sfix31_En31
  wire signed [30:0] add_signext_3; // sfix31_En31
  wire signed [31:0] add_temp_1; // sfix32_En31
  reg  signed [32:0] sumpipe1_2; // sfix33_En31
  wire signed [32:0] sum1_3; // sfix33_En31
  wire signed [30:0] add_signext_4; // sfix31_En31
  wire signed [30:0] add_signext_5; // sfix31_En31
  wire signed [31:0] add_temp_2; // sfix32_En31
  reg  signed [32:0] sumpipe1_3; // sfix33_En31
  wire signed [32:0] sum1_4; // sfix33_En31
  wire signed [30:0] add_signext_6; // sfix31_En31
  wire signed [30:0] add_signext_7; // sfix31_En31
  wire signed [31:0] add_temp_3; // sfix32_En31
  reg  signed [32:0] sumpipe1_4; // sfix33_En31
  wire signed [32:0] sum1_5; // sfix33_En31
  wire signed [30:0] add_signext_8; // sfix31_En31
  wire signed [30:0] add_signext_9; // sfix31_En31
  wire signed [31:0] add_temp_4; // sfix32_En31
  reg  signed [32:0] sumpipe1_5; // sfix33_En31
  reg  signed [30:0] sumpipe1_6; // sfix31_En31
  wire signed [32:0] sum2_1; // sfix33_En31
  wire signed [32:0] add_signext_10; // sfix33_En31
  wire signed [32:0] add_signext_11; // sfix33_En31
  wire signed [33:0] add_temp_5; // sfix34_En31
  reg  signed [32:0] sumpipe2_1; // sfix33_En31
  wire signed [32:0] sum2_2; // sfix33_En31
  wire signed [32:0] add_signext_12; // sfix33_En31
  wire signed [32:0] add_signext_13; // sfix33_En31
  wire signed [33:0] add_temp_6; // sfix34_En31
  reg  signed [32:0] sumpipe2_2; // sfix33_En31
  wire signed [32:0] sum2_3; // sfix33_En31
  wire signed [32:0] add_signext_14; // sfix33_En31
  wire signed [32:0] add_signext_15; // sfix33_En31
  wire signed [33:0] add_temp_7; // sfix34_En31
  reg  signed [32:0] sumpipe2_3; // sfix33_En31
  wire signed [32:0] sum3_1; // sfix33_En31
  wire signed [32:0] add_signext_16; // sfix33_En31
  wire signed [32:0] add_signext_17; // sfix33_En31
  wire signed [33:0] add_temp_8; // sfix34_En31
  reg  signed [32:0] sumpipe3_1; // sfix33_En31
  reg  signed [32:0] sumpipe3_2; // sfix33_En31
  wire signed [32:0] sum4_1; // sfix33_En31
  wire signed [32:0] add_signext_18; // sfix33_En31
  wire signed [32:0] add_signext_19; // sfix33_En31
  wire signed [33:0] add_temp_9; // sfix34_En31
  reg  signed [32:0] sumpipe4_1; // sfix33_En31
  reg  signed [32:0] output_register; // sfix33_En31

  // Block Statements
  always @( posedge clk)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
        delay_pipeline[10] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= filter_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
        end
      end
    end // Delay_Pipeline_process


  assign mul_temp = delay_pipeline[10] * coeff11;
  assign product11 = mul_temp[30:0];

  assign mul_temp_1 = delay_pipeline[9] * coeff10;
  assign product10 = mul_temp_1[30:0];

  assign mul_temp_2 = delay_pipeline[8] * coeff9;
  assign product9 = mul_temp_2[30:0];

  assign mul_temp_3 = delay_pipeline[7] * coeff8;
  assign product8 = mul_temp_3[30:0];

  assign mul_temp_4 = delay_pipeline[6] * coeff7;
  assign product7 = mul_temp_4[30:0];

  assign mul_temp_5 = delay_pipeline[5] * coeff6;
  assign product6 = mul_temp_5[30:0];

  assign mul_temp_6 = delay_pipeline[4] * coeff5;
  assign product5 = mul_temp_6[30:0];

  assign mul_temp_7 = delay_pipeline[3] * coeff4;
  assign product4 = mul_temp_7[30:0];

  assign mul_temp_8 = delay_pipeline[2] * coeff3;
  assign product3 = mul_temp_8[30:0];

  assign mul_temp_9 = delay_pipeline[1] * coeff2;
  assign product2 = mul_temp_9[30:0];

  assign mul_temp_10 = delay_pipeline[0] * coeff1;
  assign product1 = mul_temp_10[30:0];

  assign add_signext = product11;
  assign add_signext_1 = product10;
  assign add_temp = add_signext + add_signext_1;
  assign sum1_1 = $signed({{1{add_temp[31]}}, add_temp});

  assign add_signext_2 = product9;
  assign add_signext_3 = product8;
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign sum1_2 = $signed({{1{add_temp_1[31]}}, add_temp_1});

  assign add_signext_4 = product7;
  assign add_signext_5 = product6;
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign sum1_3 = $signed({{1{add_temp_2[31]}}, add_temp_2});

  assign add_signext_6 = product5;
  assign add_signext_7 = product4;
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign sum1_4 = $signed({{1{add_temp_3[31]}}, add_temp_3});

  assign add_signext_8 = product3;
  assign add_signext_9 = product2;
  assign add_temp_4 = add_signext_8 + add_signext_9;
  assign sum1_5 = $signed({{1{add_temp_4[31]}}, add_temp_4});

  always @ ( posedge clk)
    begin: temp_process1
      if (reset == 1'b1) begin
        sumpipe1_1 <= 0;
        sumpipe1_2 <= 0;
        sumpipe1_3 <= 0;
        sumpipe1_4 <= 0;
        sumpipe1_5 <= 0;
        sumpipe1_6 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe1_1 <= sum1_1;
          sumpipe1_2 <= sum1_2;
          sumpipe1_3 <= sum1_3;
          sumpipe1_4 <= sum1_4;
          sumpipe1_5 <= sum1_5;
          sumpipe1_6 <= product1;
        end
      end
    end // temp_process1

  assign add_signext_10 = sumpipe1_1;
  assign add_signext_11 = sumpipe1_2;
  assign add_temp_5 = add_signext_10 + add_signext_11;
  assign sum2_1 = add_temp_5[32:0];

  assign add_signext_12 = sumpipe1_3;
  assign add_signext_13 = sumpipe1_4;
  assign add_temp_6 = add_signext_12 + add_signext_13;
  assign sum2_2 = add_temp_6[32:0];

  assign add_signext_14 = sumpipe1_5;
  assign add_signext_15 = $signed({{2{sumpipe1_6[30]}}, sumpipe1_6});
  assign add_temp_7 = add_signext_14 + add_signext_15;
  assign sum2_3 = add_temp_7[32:0];

  always @ ( posedge clk)
    begin: temp_process2
      if (reset == 1'b1) begin
        sumpipe2_1 <= 0;
        sumpipe2_2 <= 0;
        sumpipe2_3 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe2_1 <= sum2_1;
          sumpipe2_2 <= sum2_2;
          sumpipe2_3 <= sum2_3;
        end
      end
    end // temp_process2

  assign add_signext_16 = sumpipe2_1;
  assign add_signext_17 = sumpipe2_2;
  assign add_temp_8 = add_signext_16 + add_signext_17;
  assign sum3_1 = add_temp_8[32:0];

  always @ ( posedge clk)
    begin: temp_process3
      if (reset == 1'b1) begin
        sumpipe3_1 <= 0;
        sumpipe3_2 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe3_1 <= sum3_1;
          sumpipe3_2 <= sumpipe2_3;
        end
      end
    end // temp_process3

  assign add_signext_18 = sumpipe3_1;
  assign add_signext_19 = sumpipe3_2;
  assign add_temp_9 = add_signext_18 + add_signext_19;
  assign sum4_1 = add_temp_9[32:0];

  always @ ( posedge clk)
    begin: temp_process4
      if (reset == 1'b1) begin
        sumpipe4_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe4_1 <= sum4_1;
        end
      end
    end // temp_process4

  assign sum_final = sumpipe4_1;

  always @ ( posedge clk)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= sum_final;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // filter
